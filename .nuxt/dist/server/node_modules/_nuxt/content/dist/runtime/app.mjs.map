{"version":3,"file":"app.mjs","sources":["../../../../../../../../node_modules/@nuxt/content/dist/runtime/app.js"],"sourcesContent":["import { collectionQueryBuilder } from \"./internal/query.js\";\nimport { generateNavigationTree } from \"./internal/navigation.js\";\nimport { generateItemSurround } from \"./internal/surround.js\";\nimport { generateSearchSections } from \"./internal/search.js\";\nimport { fetchQuery } from \"./internal/api.js\";\nimport { tryUseNuxtApp } from \"#imports\";\nexport const queryCollection = (collection) => {\n  const event = tryUseNuxtApp()?.ssrContext?.event;\n  return collectionQueryBuilder(collection, (collection2, sql) => executeContentQuery(event, collection2, sql));\n};\nexport function queryCollectionNavigation(collection, fields) {\n  return chainablePromise(collection, (qb) => generateNavigationTree(qb, fields));\n}\nexport function queryCollectionItemSurroundings(collection, path, opts) {\n  return chainablePromise(collection, (qb) => generateItemSurround(qb, path, opts));\n}\nexport function queryCollectionSearchSections(collection, opts) {\n  return chainablePromise(collection, (qb) => generateSearchSections(qb, opts));\n}\nasync function executeContentQuery(event, collection, sql) {\n  if (import.meta.client) {\n    return queryContentSqlClientWasm(collection, sql);\n  } else {\n    return fetchQuery(event, String(collection), sql);\n  }\n}\nasync function queryContentSqlClientWasm(collection, sql) {\n  const rows = await import(\"./internal/database.client.js\").then((m) => m.loadDatabaseAdapter(collection)).then((db) => db.all(sql));\n  return rows;\n}\nfunction chainablePromise(collection, fn) {\n  const queryBuilder = queryCollection(collection);\n  const chainable = {\n    where(field, operator, value) {\n      queryBuilder.where(String(field), operator, value);\n      return chainable;\n    },\n    andWhere(groupFactory) {\n      queryBuilder.andWhere(groupFactory);\n      return chainable;\n    },\n    orWhere(groupFactory) {\n      queryBuilder.orWhere(groupFactory);\n      return chainable;\n    },\n    order(field, direction) {\n      queryBuilder.order(String(field), direction);\n      return chainable;\n    },\n    then(onfulfilled, onrejected) {\n      return fn(queryBuilder).then(onfulfilled, onrejected);\n    },\n    catch(onrejected) {\n      return this.then(void 0, onrejected);\n    },\n    finally(onfinally) {\n      return this.then(void 0, void 0).finally(onfinally);\n    },\n    get [Symbol.toStringTag]() {\n      return \"Promise\";\n    }\n  };\n  return chainable;\n}\n"],"names":[],"mappings":";;;AAMY,MAAC,kBAAkB,CAAC,eAAe;;AAC7C,QAAM,SAAQ,+BAAA,mBAAiB,eAAjB,mBAA6B;AAC3C,SAAO,uBAAuB,YAAY,CAAC,aAAa,QAAQ,oBAAoB,OAAO,aAAa,GAAG,CAAC;AAC9G;AAUA,eAAe,oBAAoB,OAAO,YAAY,KAAK;AAGlD;AACL,WAAO,WAAW,OAAO,OAAO,UAAU,GAAG,GAAG;AAAA,EACpD;AACA;","x_google_ignoreList":[0]}